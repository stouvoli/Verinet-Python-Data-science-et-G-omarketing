#!/usr/bin/python

""" Complétez le code dans ClassifyNB.py avec le classificateur 
    Naive Bayes de sklearn pour classifier les données de terrain.
    
    L'objectif de cet exercice est de recréer la frontière de décision 
    montrée dans la leçon, et de faire un graphique qui
    montre visuellement cette frontière de décision """


from prep_terrain_data import makeTerrainData
from class_vis import prettyPicture, output_image
from ClassifyNB import classify

import numpy as np
import pylab as pl


features_train, labels_train, features_test, labels_test = makeTerrainData()

### les données d'entraînement (features_train, labels_train) ont à la fois des points "rapides" et 
### "lents" mélangés ensemble - séparez-les pour pouvoir leur donner des couleurs différentes dans 
### le nuage de points, et les identifier visuellement
grade_fast = [features_train[ii][0] for ii in range(0, len(features_train)) if labels_train[ii]==0]
bumpy_fast = [features_train[ii][1] for ii in range(0, len(features_train)) if labels_train[ii]==0]
grade_slow = [features_train[ii][0] for ii in range(0, len(features_train)) if labels_train[ii]==1]
bumpy_slow = [features_train[ii][1] for ii in range(0, len(features_train)) if labels_train[ii]==1]


# Vous devrez compléter cette fonction importée depuis le script ClassifyNB.
clf = classify(features_train, labels_train)



### dessinez la frontière de décision avec les points de test superposés
prettyPicture(clf, features_test, labels_test)
from IPython.display import Image
Image("test.png")